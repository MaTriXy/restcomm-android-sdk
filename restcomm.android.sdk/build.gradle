apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

// buildscript block only controls dependencies for the buildscript process itself, not for the application code
// We need this even though Project already has it, because we want the SDK module to work independently too
buildscript {
    repositories {
        // Only add repositories here that are used in *buildscript dependencies* NOT application dependencies.
        // These go to the separate repositories block further down
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.6.1"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

android {
    compileSdkVersion 28
    //buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28

        logger.info("-- Using versionCode: " + VERSION_CODE)
        versionCode VERSION_CODE.toInteger()

        logger.info("-- Using versionName: " + VERSION_NAME)
        versionName VERSION_NAME
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
        }
        lintOptions {
            //abortOnError false
        }
    }

    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'libs/jniLibs' // This is not necessary unless you have precompiled libraries in your project.
    }

    // TODO: currently getting some lint error from log4j library we 're using, that we need to fix and then remove this altogether:
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            // The rest of the signing properties are set in the global gradle.properties. Reason we keep this path here
            // is that the path needs to be absolute, but yet we want it to be functional both on local and Travis builds.
            // Since there doesn't seem to be a way to add conditional logic in properties files let's do it here
            if (project.hasProperty('SIGNING_SECRET_KEYRING_FULLPATH')) {
                ext."signing.secretKeyRingFile" = SIGNING_SECRET_KEYRING_FULLPATH
            }
            else {
                ext."signing.secretKeyRingFile" = System.properties['user.home'] + "/.gnupg/secring.gpg"
            }
        }
    }
}
repositories {
    mavenLocal()
    jcenter()
    maven {
        url "http://telestax.jfrog.io/telestax/community-releases"
    }
    maven {
        url "https://maven.google.com"
    }
/*    maven {
        url "https://maven.repository.redhat.com/ga/"
    }*/

}

dependencies {
    //compile project(':libwebrtc')
    implementation 'org.webrtc:google-webrtc:1.0.21217'
    //compile 'org.restcomm.android:libwebrtc:1.0.0-beta5-16765@aar'
    //compile files('libs/libjingle_peerconnection_java.jar')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    // for RCDevice FSM
    implementation 'org.squirrelframework:squirrel-foundation:0.3.8'
//    compile 'com.googlecode:openbeans:1.0'
    // Notice that log4j 2.7 doesn't work on account of JAIN SIP expecting log4j GroupId, not org.apache.logging.log4j
    // TODO: We should try to fix that at some point
    //compile 'org.apache.logging.log4j:log4j:2.7'
    // So we 're using 1.2.17 which uses the same Group Id, and also use 1.2.17 instead of 1.2.15 which has a dependency that causes us issues
    implementation 'log4j:log4j:1.2.17'
    implementation 'javax.sip:android-jain-sip-ri:1.2.293'
    // Provide JAIN SIP with proper Bouncy Castle encryption facilities (although Android seems to support BC, it appears that it has issues)
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation 'com.madgag.spongycastle:pkix:1.58.0.0'
    // Required for local unit tests (JUnit 4 framework)
    //testCompile 'junit:junit:4.12'
    // Even though sdk doesn't directly use dnsjava, we need it for android-jain-sip-ext. The reason is that for now android-jain-sip-ext declares its dependency to
    // dnsjava as 'provided', because in non android environment it is provided already (i.e. sip servlets). Until we fix the android-jain-sip-ext .pom let's leave it
    // at that
    implementation 'dnsjava:dnsjava:2.1.7'
    implementation 'org.mobicents.javax.sip:android-jain-sip-ext:1.3.33'
    //compile 'org.mobicents.javax.sip:android-jain-sip-ext:1.3.0-SNAPSHOT'
    implementation 'com.google.firebase:firebase-messaging:11.8.0'
    implementation 'com.firebase:firebase-jobdispatcher:0.6.0'

    // deps for roboelectric; remember it runs on the development machine
    testImplementation "org.assertj:assertj-core:1.7.1"
    testImplementation "org.robolectric:robolectric:3.6.1"
    testImplementation 'junit:junit:4.12'
}



// Upload to sonatype stuff
nexusStaging {
    //serverUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    username = getRepositoryUsername();
    password = getRepositoryPassword();

    packageGroup = LIBRARY_GROUP  // optional if packageGroup == project.getGroup()
    //stagingProfileId = "stagingProfile"  // when not defined will be got from server using "packageGroup"
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs // files(android.sourceSets.main.java.sourceFiles)
    title = "Restcomm Android SDK"
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar) + files("libs/libjingle_peerconnection_java.jar") //+ files("$buildDir/intermediates/bundles/debug/classes.jar")

    destinationDir = file("../doc/")
    // Include only the higher API modules, so that its clean for the user
    include("**/RCClient.java", "**/RCConnection.java", "**/RCConnectionListener.java", "**/RCDevice.java", "**/RCDeviceListener.java")
    //exclude '**/org/restcomm/android/sdk/MediaClient/**'
    // Notice that including only higher API modules results in errors for seemingly undefined symbols. Until we find a way to deal with that
    // let's avoid failing on error
    failOnError true
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

signing {
    sign configurations.archives
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            // Defined at gradle.properties for Olympus project -we might need to move those to be scoped for the library alone
            pom.groupId = LIBRARY_GROUP
            pom.artifactId = LIBRARY_ARTIFACT_ID

            if (project.hasProperty('BUILD_NUMBER')) {
                // In Travis builds add the build number in the version string
                // for example '1.0.0-BETA6-45-SNAPSHOT'
                pom.version = VERSION_NAME + "-" + BUILD_NUMBER //+ "-SNAPSHOT"
            }
            else {
                // For non CI builds, just use a zero for the build number
                pom.version = VERSION_NAME + "-0" //+ "-SNAPSHOT"
            }

            logger.error("-- POM version: " + pom.version)

            // remember that releases first go to the staging area
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name 'Restcomm Android SDK'
                packaging 'aar'
                // optionally artifactId can be defined here
                description 'Android Webrtc SDK to easily integrate communication/collaboration features into native Apps.'
                url 'https://github.com/RestComm/restcomm-android-sdk'

                scm {
                    connection 'scm:git:https://github.com/RestComm/restcomm-android-sdk'
                    developerConnection 'scm:git:https://github.com/RestComm/restcomm-android-sdk'
                    url 'https://github.com/RestComm/restcomm-android-sdk'
                }

                licenses {
                    license {
                        name 'GNU Affero General Public License, Version 3.0'
                        url 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }

                developers {
                    developer {
                        id 'atsakiridis'
                        name 'Antonis Tsakiridis'
                        email 'antonis.tsakiridis@telestax.com'
                        organization 'Telestax'
                        organizationUrl 'http://www.telestax.com'
                    }
                }

                contributors {
                    contributor {
                        name 'Arslan Mehboob'
                        //email 'john@doe.com'
                    }
                }

            }
        }
    }
}
